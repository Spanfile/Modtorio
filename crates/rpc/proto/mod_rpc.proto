syntax = "proto3";
package mod_rpc;

service ModRpc {
  rpc GetVersionInformation(Empty) returns (VersionInformation);
  rpc GetInstanceStatus(Empty) returns (InstanceStatus);

  rpc ImportGame(ImportRequest) returns (stream Progress);
  rpc UpdateStore(UpdateStoreRequest) returns (stream Progress);

  rpc InstallMod(InstallModRequest) returns (stream Progress);
  rpc RemoveMod(RemoveModRequest) returns (Empty);
  rpc EnableMod(EnableModRequest) returns (Empty);
  rpc DisableMod(DisableModRequest) returns (Empty);
  rpc UpdateMods(UpdateModsRequest) returns (stream Progress);
  rpc EnsureModDependencies(EnsureModDependenciesRequest)
      returns (stream Progress);

  rpc GetServerSettings(GetServerSettingsRequest) returns (ServerSettings);
  rpc SetServerSettings(SetServerSettingsRequest) returns (Empty);

  rpc ServerControlAction(ServerControlActionRequest) returns (stream Progress);
  rpc SendServerCommand(SendCommandRequest) returns (Empty);
  rpc GetServerStatus(ServerStatusRequest) returns (ServerStatus);
}

/* Common messages */
message Empty {}
message Version {
  uint64 major = 1;
  uint64 minor = 2;
  uint64 patch = 3;
}

message SocketAddr {
  oneof addr {
    fixed32 v4 = 1;
    bytes v6 = 2;
  }
  fixed32 port = 3;
}

message Progress {
  string message = 1;

  enum ProgressType {
    INDEFINITE = 0;
    DEFINITE = 1;
    DONE = 2;
  };
  ProgressType prog_type = 2;
  uint32 value = 3;
  uint32 max = 4;
}

/* Request messages  */
message ImportRequest {
  string path = 1;
  string settings = 2;
  string whitelist = 3;
  string adminlist = 4;
  string banlist = 5;
}

message UpdateStoreRequest {
  int64 server_id = 1;
  bool skip_info_update = 2;
}

message InstallModRequest {
  int64 server_id = 1;
  string mod_name = 2;
  Version mod_version = 3;
}

message RemoveModRequest {
  int64 server_id = 1;
  string mod_name = 2;
}

message EnableModRequest {
  int64 server_id = 1;
  string mod_name = 2;
}

message DisableModRequest {
  int64 server_id = 1;
  string mod_name = 2;
}

message UpdateModsRequest { int64 server_id = 1; }
message EnsureModDependenciesRequest { int64 server_id = 1; }
message GetServerSettingsRequest { int64 server_id = 1; }
message SetServerSettingsRequest {
  int64 server_id = 1;
  ServerSettings settings = 2;
}

message ServerControlActionRequest {
  int64 server_id = 1;

  message Start {}
  message Stop { uint64 timeout_override = 1; }
  message Kill {}
  message Restart { uint64 timeout_override = 1; }
  message ForceRestart {}

  oneof action {
    Start start = 2;
    Stop stop = 3;
    Kill kill = 4;
    Restart restart = 5;
    ForceRestart force_restart = 6;
  }
}

message SendCommandRequest {
  int64 server_id = 1;

  message Raw { repeated string arguments = 1; }
  message Say { string message = 1; }
  message Whisper {
    string player = 1;
    string message = 2;
  }
  message Save { string save_name = 1; }
  message Quit {}
  message Ban {
    string player = 1;
    string reason = 2;
  }
  message Unban { string player = 1; }
  message Kick {
    string player = 1;
    string reason = 2;
  }
  message Mute { string player = 1; }
  message Unmute { string player = 1; }
  message Promote { string player = 1; }
  message Demote { string player = 1; }
  message Purge { string player = 1; }

  oneof command {
    Raw raw = 2;
    Say say = 3;
    Save save = 4;
    Quit quit = 5;
    Whisper whisper = 6;
    Ban ban = 7;
    Unban unban = 8;
    Kick kick = 9;
    Mute mute = 10;
    Unmute unmute = 11;
    Promote promote = 12;
    Demote demote = 13;
    Purge purge = 14;
  }
}

message ServerStatusRequest { int64 server_id = 1; }

/* Response messages */
message VersionInformation {
  Version version = 1;
  Version protocol_version = 2;
}

enum ExecutionStatus {
  SHUTDOWN = 0;
  STARTING = 1;
  RUNNING = 2;
  SHUTTING_DOWN = 3;
  CRASHED = 4;
};

message InstanceStatus {
  int64 uptime = 1;

  message Server {
    int64 server_id = 1;
    ExecutionStatus status = 2;
    string path = 3;
  };
  repeated Server servers = 2;

  enum Status {
    STARTING = 0;
    RUNNING = 1;
  };
  Status instance_status = 3;
}

message ServerStatus {
  int64 uptime = 1;
  ExecutionStatus status = 2;

  enum InGameStatus {
    INITIALISING = 0;
    READY = 1;
    PREPARED_TO_HOST_GAME = 2;
    CREATING_GAME = 3;
    IN_GAME = 4;
    IN_GAME_SAVING_MAP = 5;
    DISCONNECTING_SCHEDULED = 6;
    DISCONNECTING = 7;
    CLOSED = 8;
  };
  InGameStatus in_game_status = 3;

  message Player {
    string username = 1;
    SocketAddr peer_address = 2;

    enum PlayerStatus {
      DISCONNECTED = 0;
      READY = 1;
      CONNECTED_WAITING_FOR_MAP = 2;
      CONNECTED_DOWNLOADING_MAP = 3;
      CONNECTED_LOADING_MAP = 4;
      TRYING_TO_CATCH_UP = 5;
      WAITING_FOR_COMMAND_TO_START_SENDING_TICK_CLOSURES = 6;
      IN_GAME = 7;
      DISCONNECT_SCHEDULED = 8;
    }
    PlayerStatus status = 3;
    string connection_time = 4;
    string join_time = 5;
    string leave_time = 6;
  }
  repeated Player players = 4;
}

message ServerSettings {
  string name = 1;
  string description = 2;
  repeated string tags = 3;
  uint64 max_players = 4;

  message Visibility {
    bool public = 1;
    bool lan = 2;
  }
  Visibility visibility = 5;
  string username = 6;
  string password = 7;
  string token = 8;
  string game_password = 9;
  bool require_user_verification = 10;
  uint64 max_upload_in_kilobytes_per_second = 11;
  uint64 max_upload_slots = 12;
  uint64 minimum_latency_in_ticks = 13;
  bool ignore_player_limit_for_returning_players = 14;

  enum AllowCommands {
    YES = 0;
    NO = 1;
    ADMINS_ONLY = 2;
  }
  AllowCommands allow_commands = 15;
  uint64 autosave_interval = 16;
  uint64 autosave_slots = 17;
  uint64 afk_autokick_interval = 18;
  bool auto_pause = 19;
  bool only_admins_can_pause_the_game = 20;
  bool autosave_only_on_server = 21;
  bool non_blocking_saving = 22;
  uint64 minimum_segment_size = 23;
  uint64 minimum_segment_size_peer_count = 24;
  uint64 maximum_segment_size = 25;
  uint64 maximum_segment_size_peer_count = 26;
  SocketAddr bind = 27;
  string save_name = 28;

  enum StartBehaviour {
    LOAD_LATEST = 0;
    LOAD_FILE = 1;
    LOAD_SCENARIO = 2;
    CREATE = 3;
  }
  StartBehaviour start_behaviour = 29;
  bool auto_start = 30;
  uint64 graceful_shutdown_timeout = 31;
}
